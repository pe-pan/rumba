// generated by http://www.jsonschema2pojo.org/
package com.myq.interview.cleaner.data;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
        "X",
        "Y"
})
public class Position implements Comparable<Position> {

    @JsonProperty("X")
    private Integer x;
    @JsonProperty("Y")
    private Integer y;

    /**
     * No args constructor for use in serialization
     *
     */
    public Position() {
    }

    /**
     *
     * @param x
     * @param y
     */
    public Position(Integer x, Integer y) {
        super();
        this.x = x;
        this.y = y;
    }

    public Position(RobotPosition position) { //use this constructor to remove facing
        this.x = position.getX();
        this.y = position.getY();
    }

    @JsonProperty("X")
    public Integer getX() {
        return x;
    }

    @JsonProperty("X")
    public void setX(Integer x) {
        this.x = x;
    }

    @JsonProperty("Y")
    public Integer getY() {
        return y;
    }

    @JsonProperty("Y")
    public void setY(Integer y) {
        this.y = y;
    }

    public void setPosition(Position p) {
        this.x = p.x;
        this.y = p.y;
    }

    @Override
    public int hashCode() {
        return new HashCodeBuilder().append(x).append(y).toHashCode();
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if (!(other instanceof Position)) {
            return false;
        }
        Position rhs = ((Position) other);
        return new EqualsBuilder().append(x, rhs.x).append(y, rhs.y).isEquals();
    }

    @Override
    public int compareTo(Position o) {
        int diff = this.getY() - o.getY();
        if (diff == 0) {
            return this.getX() - o.getX();
        }
        return diff;
    }
}